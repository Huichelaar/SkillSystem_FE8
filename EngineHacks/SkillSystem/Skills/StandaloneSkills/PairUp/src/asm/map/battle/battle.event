// Map battle stuff.

PUSH

  // Clear backup Unit's MU if mainUnit dies.
  ORG 0x326A0
    jumpToHack(PAU_mapBattleDeathClearMU)

  // Start extra battle MUs for backup units of paired-up units.
  ORG 0x7B964
    jumpToHack(PAU_mapBattleInitBackupMUs)
  
  // Set facing direction of backup units of paired-up units.
  // Also redo display order, taking x and y offsets into account.
  ORG 0x7B476               // This function call is replaced by PAU_battleMuSortObjLayers,
    SHORT 0x46C0 0x46C0     // and called after x and y offsets of MUs has been set.
  ORG 0x7B4B0
    SHORT 0x4B02 0x4718     // jumpToHack, but using the next jumpToHack's literal.
  ORG 0x7B4B8
    jumpToHack(PAU_mapBattleFaceBackupMUs)
  
  // Draw pairup overlay TSA if paired-up.
  ORG 0x7BE5C
    jumpToHack(PAU_mapBattlePickTSAArray)
  ORG 0x7BE82
    SHORT 0x0724    // lsl r4, #0x1C      @ lsl r4 0xC and lsl r4 #0x10 in one instruction.
    SHORT 0x01B9    // lsl r1, r7, #0x6   @ r7 is 1 if paired-up, 0 otherwise.
    SHORT 0xBC80    // pop {r7}           @ To match the push {r7} in PAU_mapBattlePickTSAArray.
    SHORT 0x1A40    // sub r0, r1         @ Move ScreenEntries one row higher if paired-up.
  // Repoint tiles, and move them 1 slot earlier.
  ORG 0x7BC44
    POIN PAU_mapBattleWindowGfx
    WORD 0x6000000
  // Repoint solo TSA.
  ORG 0x9A3670
    POIN PAU_mapBattleWindowSoloTSA
    POIN PAU_mapBattleWindowSoloTSA
    POIN PAU_mapBattleWindowSoloTSA
    POIN PAU_mapBattleWindowSoloTSA
  // Repoint left and right TSA if battlestats hasn't.
  #ifndef BATTLE_STATS
    POIN PAU_mapBattleWindowRightTSA
    POIN PAU_mapBattleWindowLeftTSA
  #endif // BATTLE_STATS
  
  // Update gauge icons.
  ORG 0x81628
    jumpToHack(PAU_mapBattleUpdateGaugeIcons)
  
  // Take MU xOffs and yOffs into account for paired-up units during crit shake.
  ORG 0x9A2D78
    PROC_LOOP_ROUTINE(PAU_MU_CritFlash_SpriteShakeLoop)
  
  // Swap battle MUs if dual guard or dual strike.
  ORG 0x9A4764
    PROC_CALL_ROUTINE_ARG(PAU_startSwapMSProc, 1)   // 1 indicates we're at the start of our proc.
  ORG 0x9A4814
    PROC_CALL_ROUTINE_ARG(PAU_startSwapMSProc, 0)   // 0 indicates we're at the end of our proc.

POP

ALIGN 4; PAU_mapBattleInitBackupMUs: #include "initBackupMUs.lyn.event"
ALIGN 4; PAU_mapBattleFaceBackupMUs: #include "faceBackupMUs.lyn.event"
ALIGN 4; PAU_mapBattleDeathClearMU: #include "deathClearMU.lyn.event"
ALIGN 4; PAU_mapBattlePickTSAArray: #include "pickTSAArray.lyn.event"
ALIGN 4; PAU_mapBattleUpdateGaugeIcons: #include "updateGaugeIcons.lyn.event"