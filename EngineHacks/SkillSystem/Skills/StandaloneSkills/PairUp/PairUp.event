// All functionality for the PairUp Skill.
#ifndef _FE8_
  ERROR "You're not assembling to an FE8 ROM!"
#endif

#include "Extensions/Hack Installation.txt"
#include "EAstdlib.event"

// Parameters, change these to fit your project.
  
  // This should point to a free byte in RAM.
  ALIGN 4; PAU_pairUpBitsRAMAddress:          // pair-up active and pair-upgauge.
  WORD 0x3000006
  // This should point to a different free byte in RAM.
  ALIGN 4; PAU_pairUpBattleGaugeRAMAddress:   // battle pair-upgauge. Temporarily stores a copy of pair-upgauge during battles.
  WORD 0x3000007
  
  // Pair-up gauge size. This needs to be a value in [0, 127].
  // Pair-up gauge is incremented by one for each action in battle.
  PAU_gaugeSize:
  BYTE 5
  
  // Pair-up action index. This is used by action data and PostActionCalcLoop.
  // This should be an unused actionID. If changing this, need to change UnitActionRework.event to match.
  #define PAU_actionIDdef 0x2C
  PAU_actionID:
  BYTE PAU_actionIDdef
  
  // Stat boosts given by pair-up partners.
  // Byte order: Atk, Skl, Spd, Def, Res, Luk.
  ALIGN 4; PAU_offStatBoost:
  BYTE 0 4 3 0 3 0
  ALIGN 4; PAU_defStatBoost:
  BYTE 3 0 0 3 0 4
  
  // Pixel offset between main attacker/defender and their pair-up partner.
  ALIGN 2; PAU_bAnimDistX:
  SHORT 16
  ALIGN 2; PAU_bAnimDistY:
  SHORT (-8)
  
  // BanimRoundScripts for the paired-up unit.
  // Based on the default ones at 0x80DAEF0,
  // but with decreased depth, to ensure them
  // appearing behind their partner.
  ALIGN 4; PAU_backupBAnimRoundScripts:
  BYTE 0x00 0x27 0x01 0x26      // The only two
  BYTE 0x02 0x27 0x03 0x26      // with Pierce frames.
  BYTE 0x04 0x27 0xFF 0x26
  BYTE 0x05 0x27 0xFF 0x26
  BYTE 0x06 0x27 0xFF 0x26
  BYTE 0x07 0x27 0xFF 0x26
  BYTE 0x08 0x27 0xFF 0x26
  BYTE 0x09 0x27 0xFF 0x26
  BYTE 0x0A 0x27 0xFF 0x26
  BYTE 0x0B 0x27 0xFF 0x26
  
  // These sounds play when the battle anims swap
  // when dual strike or dual guard trigger,
  // or when the anims swap back after strike/guard.
  // Set to -1 if you don't want anything to play.
  ALIGN 2; PAU_dualStrikeSkillActivationSound:
  SHORT 0xCB
  ALIGN 2; PAU_dualGuardSkillActivationSound:
  SHORT 0xCB
  ALIGN 2; PAU_swapBackActivationSound:
  SHORT (-1)
  
  // Amount of frames it takes for backup and main
  // battle sprites to swap when dual skills trigger.
  PAU_dualBAnimSwapTime:
  BYTE 10
  
  // List of spellIDs of staves/dance/sing spellAnimIDs that should
  // increment the pair-up gauge. 0-terminated.
  ALIGN 4; PAU_statusSpellAffectGaugeList:
  //SHORT 0xE             // Song. Not sure what this is, it might be unused in FE8.
  //SHORT 0xF             // Dance. To add this, new hook for incrementing battle gauge needs to be added to ActionDance.
  //SHORT 0x2C            // Restore staff.
  SHORT 0x2D            // Silence.
  SHORT 0x2E            // Sleep.
  //SHORT 0x2F            // Hammerne.
  SHORT 0x30            // Berserk.
  //SHORT 0x31            // Barrier.
  SHORT 0 0 0 0 0 0 0   // Terminator + redundancy for potential future spells.
  
  // Table of magic animations corresponding to default weapon types.
  // If Dual Striker doesn't have an equippable weapon, the first non-staff
  // non-unarmed battle animation of their class animation struct is picked,
  // and its weapontype is used as an index to this table to find a corresponding magicAnimationID.
  ALIGN 4; PAU_defaultMagicAnimsTable:
  SHORT 0x1F          // 0  Sword   -> 0x1F Lightning (mimicking Light Brand).
  SHORT 0x3           // 1  Lance   -> 0x3  javelin#1.
  SHORT 0x1           // 2  Axe     -> 0x1  Hand Axe.
  SHORT 0x2           // 3  Bow     -> 0x2  Arrow.
  SHORT 0xFFFF        // 4  Staff   -> -1   None. Not ever picked.
  SHORT 0x16          // 5  Anima   -> 0x16 Fire.
  SHORT 0x1F          // 6  Light   -> 0x1F Lightning.
  SHORT 0x1D          // 7  Dark    -> 0x1D Flux.
  SHORT 0x2           // 8  unk     -> 0x2  Arrow. Default for unks.
  SHORT 0xFFFF        // 9  Unarmed -> -1   None. Not ever picked.
  SHORT 0x2           // 10 unk     -> 0x2  Arrow. Default for unks.
  SHORT 0x43          // 11 Monster -> 0x43 Evil Eye.
  SHORT 0xE           // 12 Ring    -> 0xE  Dance/Play.
  SHORT 0 0 0 0 0 0 0 0   // Redundancy for potential future weapontypes.
  
  // Replaces Nosferatu spell animation when cast by paired-up unit.
  // Nosferatu breaks when it tries to recover user's HP,
  // when user is dual striker. Also affects Runesword.
  ALIGN 4; PAU_nosferatuReplacementSpellID:
  SHORT 0x34          // Luna.
  
  // If set to 0, when paired-up, backup unit's mapsprite will be hidden
  // and a rescue icon will display over the main unit's sprite. 
  // If set to 1, when paired-up, both mapsprites will show.
  PAU_showBothMapSprites:
  BYTE 1
  
    // This determines how far paired-up mapsprites stray from the tile
    // a single mapsprite would stand on. Values are in pixels.
    // These won't affect anything if PAU_showBothMapSprites is set to 0.
    PAU_mapOffs:
    BYTE 4

// Includes.
#include "src/src.event"
#include "gfx/gfx.event"

// Messages. Helps keep track where parameters
// are in ROM should things need to move again.
/*
PUSH

  // Parameters.
  ORG PAU_pairUpBitsRAMAddress
  MESSAGE "PAU_pairUpBitsRAMAddress at: " CurrentOffset
  ORG PAU_pairUpBattleGaugeRAMAddress
  MESSAGE "PAU_pairUpBattleGaugeRAMAddress at: " CurrentOffset
  ORG PAU_gaugeSize
  MESSAGE "PAU_gaugeSize at: " CurrentOffset
  ORG PAU_actionID
  MESSAGE "PAU_actionID at: " CurrentOffset
  ORG PAU_offStatBoost
  MESSAGE "PAU_offStatBoost at: " CurrentOffset
  ORG PAU_defStatBoost
  MESSAGE "PAU_defStatBoost at: " CurrentOffset
  ORG PAU_bAnimDistX
  MESSAGE "PAU_bAnimDistX at: " CurrentOffset
  ORG PAU_bAnimDistY
  MESSAGE "PAU_bAnimDistY at: " CurrentOffset
  ORG PAU_backupBAnimRoundScripts
  MESSAGE "PAU_backupBAnimRoundScripts at: " CurrentOffset
  ORG PAU_dualStrikeSkillActivationSound
  MESSAGE "PAU_dualStrikeSkillActivationSound at: " CurrentOffset
  ORG PAU_dualGuardSkillActivationSound
  MESSAGE "PAU_dualGuardSkillActivationSound at: " CurrentOffset
  ORG PAU_swapBackActivationSound
  MESSAGE "PAU_swapBackActivationSound at: " CurrentOffset
  ORG PAU_dualBAnimSwapTime
  MESSAGE "PAU_dualBAnimSwapTime at: " CurrentOffset
  ORG PAU_statusSpellAffectGaugeList
  MESSAGE "PAU_statusSpellAffectGaugeList at: " CurrentOffset
  ORG PAU_defaultMagicAnimsTable
  MESSAGE "PAU_defaultMagicAnimsTable at: " CurrentOffset
  ORG PAU_nosferatuReplacementSpellID
  MESSAGE "PAU_nosferatuReplacementSpellID at: " CurrentOffset
  ORG PAU_showBothMapSprites
  MESSAGE "PAU_showBothMapSprites at: " CurrentOffset
  ORG PAU_mapOffs
  MESSAGE "PAU_mapOffs at: " CurrentOffset
  
  // Graphics.
  // Forecast.
  ORG PAU_infoWindowTSA
  MESSAGE "PAU_infoWindowTSA at:" CurrentOffset
  ORG PAU_forecastWindowLeftTSA
  MESSAGE "PAU_forecastWindowLeftTSA at:" CurrentOffset
  ORG PAU_forecastWindowRightTSA
  MESSAGE "PAU_forecastWindowRightTSA at:" CurrentOffset
  ORG PAU_forecastWindowBothTSA
  MESSAGE "PAU_forecastWindowBothTSA at:" CurrentOffset
  ORG PAU_forecastWindowExtLeftTSA
  MESSAGE "PAU_forecastWindowExtLeftTSA at:" CurrentOffset
  ORG PAU_forecastWindowExtRightTSA
  MESSAGE "PAU_forecastWindowExtRightTSA at:" CurrentOffset
  ORG PAU_forecastWindowExtBothTSA
  MESSAGE "PAU_forecastWindowExtBothTSA at:" CurrentOffset
  
  // Anims off battle window.
  ORG PAU_mapBattleWindowSoloTSA
  MESSAGE "PAU_mapBattleWindowSoloTSA at:" CurrentOffset
  ORG PAU_mapBattleWindowSoloPUTSA
  MESSAGE "PAU_mapBattleWindowSoloPUTSA at:" CurrentOffset
  #ifndef BATTLE_STATS
    ORG PAU_mapBattleWindowLeftTSA
    MESSAGE "PAU_mapBattleWindowLeftTSA at:" CurrentOffset
    ORG PAU_mapBattleWindowLeftPUTSA
    MESSAGE "PAU_mapBattleWindowLeftPUTSA at:" CurrentOffset
    ORG PAU_mapBattleWindowRightTSA
    MESSAGE "PAU_mapBattleWindowRightTSA at:" CurrentOffset
    ORG PAU_mapBattleWindowRightPUTSA
    MESSAGE "PAU_mapBattleWindowRightPUTSA at:" CurrentOffset
  #endif // BATTLE_STATS
  ORG PAU_mapBattleWindowGfx
  MESSAGE "PAU_mapBattleWindowGfx at:" CurrentOffset
  ORG PAU_mapBattleWindowTSAArray
  MESSAGE "PAU_mapBattleWindowTSAArray at:" CurrentOffset

POP
*/