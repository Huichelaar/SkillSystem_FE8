// All functionality for the PairUp Skill.
#ifndef _FE8_
  ERROR "You're not assembling to an FE8 ROM!"
#endif

#include "Extensions/Hack Installation.txt"
#include "EAstdlib.event"

// Parameters, change these to fit your project.
  
  // This should point to a free byte in RAM.
  ALIGN 4; PAU_pairUpBitsRAMAddress:          // pair-up active and pair-upgauge.
  WORD 0x3000006
  // This should point to a different free byte in RAM.
  ALIGN 4; PAU_pairUpBattleGaugeRAMAddress:   // battle pair-upgauge. Temporarily stores a copy of pair-upgauge during battles.
  WORD 0x3000007
  
  // Pair-up gauge size. This needs to be a value in [0, 127].
  // Pair-up gauge is incremented by one for each action in battle.
  PAU_gaugeSize:
  BYTE 5
  
  // Pair-up action index. This is used by action data and PostActionCalcLoop.
  // This should be an unused actionID. If changing this, need to change UnitActionRework.event to match.
  #define PAU_actionIDdef 0x28
  PAU_actionID:
  BYTE PAU_actionIDdef
  
  // Stat boosts given by pair-up partners.
  // Byte order: Atk, Skl, Spd, Def, Res, Luk.
  ALIGN 4; PAU_offStatBoost:
  BYTE 0 4 3 0 3 0
  ALIGN 4; PAU_defStatBoost:
  BYTE 3 0 0 3 0 4
  
  // Pixel offset between main attacker/defender and their pair-up partner.
  ALIGN 2; PAU_bAnimDistX:
  SHORT 16
  ALIGN 2; PAU_bAnimDistY:
  SHORT (-8)
  
  // BanimRoundScripts for the paired-up unit.
  // Based on the default ones at 0x80DAEF0,
  // but with decreased depth, to ensure them
  // appearing behind their partner.
  ALIGN 4; PAU_backupBAnimRoundScripts:
  BYTE 0x00 0x27 0x01 0x26      // The only two
  BYTE 0x02 0x27 0x03 0x26      // with Pierce frames.
  BYTE 0x04 0x27 0xFF 0x26
  BYTE 0x05 0x27 0xFF 0x26
  BYTE 0x06 0x27 0xFF 0x26
  BYTE 0x07 0x27 0xFF 0x26
  BYTE 0x08 0x27 0xFF 0x26
  BYTE 0x09 0x27 0xFF 0x26
  BYTE 0x0A 0x27 0xFF 0x26
  BYTE 0x0B 0x27 0xFF 0x26
  
  // These sounds play when the battle anims swap
  // when dual strike or dual guard trigger,
  // or when the anims swap back after strike/guard.
  // Set to -1 if you don't want anything to play.
  ALIGN 2; PAU_dualStrikeSkillActivationSound:
  SHORT 0xCB
  ALIGN 2; PAU_dualGuardSkillActivationSound:
  SHORT 0xCB
  ALIGN 2; PAU_swapBackActivationSound:
  SHORT (-1)
  
  // Amount of frames it takes for backup and main
  // battle sprites to swap when dual skills trigger.
  PAU_dualBAnimSwapTime:
  BYTE 10
  
  // Table of magic animations corresponding to default weapon types.
  // If Dual Striker doesn't have an equippable weapon, the first non-staff
  // non-unarmed battle animation of their class animation struct is picked,
  // and its weapontype is used as an index to this table to find a corresponding magicAnimationID.
  ALIGN 4; PAU_defaultMagicAnimsTable:
  SHORT 0x1F          // 0  Sword   -> 0x1F Lightning (mimicking Light Brand).
  SHORT 0x3           // 1  Lance   -> 0x3  javelin#1.
  SHORT 0x1           // 2  Axe     -> 0x1  Hand Axe.
  SHORT 0x2           // 3  Bow     -> 0x2  Arrow.
  SHORT 0xFFFF        // 4  Staff   -> -1   None. Not ever picked.
  SHORT 0x16          // 5  Anima   -> 0x16 Fire.
  SHORT 0x1F          // 6  Light   -> 0x1F Lightning.
  SHORT 0x1D          // 7  Dark    -> 0x1D Flux.
  SHORT 0x2           // 8  unk     -> 0x2  Arrow. Default for unks.
  SHORT 0xFFFF        // 9  Unarmed -> -1   None. Not ever picked.
  SHORT 0x2           // 10 unk     -> 0x2  Arrow. Default for unks.
  SHORT 0x43          // 11 Monster -> 0x43 Evil Eye.
  SHORT 0xE           // 12 Ring    -> 0xE  Dance/Play.
  SHORT 0 0 0 0 0 0 0 0   // Redundancy for potential future weapontypes.
  
  // Replaces Nosferatu spell animation when cast by paired-up unit.
  // Nosferatu breaks when it tries to recover user's HP,
  // when user is dual striker. Also affects Runesword.
  ALIGN 4; PAU_nosferatuReplacementSpellID:
  SHORT 0x34          // Luna.
  
  // Temp, give EirikaLord different movement. For testing purposes.
  // PUSH; ORG 0x8071CA; BYTE 3; POP

// Includes.
#include "src/src.event"
#include "gfx/gfx.event"
/*

// Messages. Helps keep track where everything is,
// should things need to move again.
// Reference README for which messages to put here.
PUSH

  // For adding pair-up command to menu.
  ORG PAU_pairUpUsability
  MESSAGE "PairUp usability at:" CurrentOffset
  ORG PAU_pairUpEffect
  MESSAGE "PairUp effect at:" CurrentOffset
  // TODO MESSAGE about where menu TSA is.
  // go over everything that might need to be MESSAGED for future changes.

POP
*/